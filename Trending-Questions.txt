The application is Home lending application and this deals with loss mitigation.
If the customer is facing hardship, Early resolution application provides zero payments for six months.
Bankrptcy will release the loan and it updates all the necessary foreclosure step codes.

Integration of the application and Reconsillation of various components. 

The flow of the applcaition is 
Angular-->Microservices-->MSP-->DB
Recenly I have built Kafka Project from scratch
Applications are deployed in PCF,Cloud management portal.

Front end Angular Compoents, RX JS (state, Action,Effects)
Backend is with legacy rest apis and Micro services
Angular2-->APIGateWay((Spring Cloud,Zuul,Apigee))-->Service Registry(Eurekha,Zookeeper)->Micro services->Oracle
APIGateWay-->Config Server->Many RestApis 
Eurekha Server for Services dispaly -- Eureka server plays a critical role 
in microservices architecture by enabling service registration, discovery, and load balancing, making it easier to build and manage distributed systems.
(Zookeeper is Alternative to Eurekha Server, Zookeeper is a more mature and battle-tested technology)

Execcutor Frame work
Websphere and Weblogic cluster.
1. Create JWT token
2.JWT tokens has header,body,signature along with subject,contentType..etc
3.From client Verify JWT Token signature
4. Get the JWT header and body by splitting it into tokens.
https://www.viralpatel.net/java-create-validate-jwt-token/
1.private key at client and public key at server.
JwtBuilder builder = Jwts.builder().setId(id)
                                .setIssuedAt(now)
                                .setSubject(subject)
                                .setIssuer(issuer)
                                .signWith(signatureAlgorithm, signingKey);
								
								return builder.compact();
								
								//This line will throw an exception if it is not a signed JWS (as expected)
 The above will be converted like
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
...
{
    "jws": {
        "body": {
            "exp": 4622470422,
            "iat": 1466796822,
            "iss": "Stormpath",
            "name": "Micah Silverman",
            "scope": "admins",
            "sub": "msilverman"
        },
        "header": {
            "alg": "HS256"
        },
        "signature": "kP0i_RvTAmI8mgpIkDFhRX3XthSdP-eqqFKGcU92ZIQ"
    },
    "status": "SUCCESS"
}
 
//This line will throw an exception if it is not a signed JWS (as expected)
    Claims claims = Jwts.parser()         
       .setSigningKey(DatatypeConverter.parseBase64Binary(apiKey.getSecret()))
       .parseClaimsJws(jwt).getBody();
    System.out.println("ID: " + claims.getId());
    System.out.println("Subject: " + claims.getSubject());
    System.out.println("Issuer: " + claims.getIssuer());
    System.out.println("Expiration: " + claims.getExpiration());
	
1.1 APIGEE token
1.2 hystrix circuit breaker vs resilience4j	
2. Netflix Hysterix

Hystrix is a library from Netflix. Hystrix isolates the points of access between the services, stops cascading failures across them and provides the fallback options.

For example, when you are calling a 3rd party application, it takes more time to send the response. So at that time, the control goes to the fallback method and returns the custom response to your application.

@HystrixCommand(fallbackMethod = "fallback_hello", commandProperties = {
        @HystrixProperty(name = "execution.isolation.thread.timeoutInMilliseconds", value = "5000"),
        @HystrixProperty(name = "circuitBreaker.requestVolumeThreshold", value = "5")
    })
})
private String fallback_hello() {
   return "Request fails. It takes long time to response";
   
   Resilent4J
   import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;

@SpringBootApplication
@EnableCircuitBreaker
public class Resilience4jApplication {

    public static void main(String[] args) {
        SpringApplication.run(Resilience4jApplication.class, args);
    }
}

resilience4j:
  circuitbreaker:
    instances:
      backendA:
        registerHealthIndicator: true
        slidingWindowSize: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 10000
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowType: COUNT_BASED
        minimumNumberOfCalls: 5
  retry:
    instances:
      backendA:
        maxAttempts: 3
        waitDuration: 500ms
        retryExceptions:
          - java.lang.RuntimeException

   
3. Log4j.properties

log4j.rootLogger=DEBUG, stdout, file
# Redirect log messages to console
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
# Redirect log messages to a log file, support file rolling.
log4j.appender.file=org.apache.log4j.RollingFileAppender
log4j.appender.file.File=c:\\log4j-application.log
log4j.appender.file.MaxFileSize=1MB
log4j.appender.file.MaxBackupIndex=2
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n

final static Logger logger = Logger.getLogger(Log4JCoreJavaSample.class);

Logback generally offers superior performance and configurability compared to Log4j, 
making it a preferred choice for modern Java logging needs.

4.	
@ConditionalOnProperty(prefix = "spring", name = "asy.library.type", havingValue = "rest", matchIfMissing = true)
public class LibRestClientAutoConfiguration {

    	
    	
    	
    	
    	