Adding indexes in MongoDB can significantly improve query performance. Here's an example of how to create indexes in MongoDB using the MongoDB Shell and a Node.js script.

Using MongoDB Shell
Let's assume you have a collection named employees in a database named company.

Create a Single Field Index:
javascript
Copy code
db.employees.createIndex({ "employee_id": 1 })
Create a Compound Index:
javascript
Copy code
db.employees.createIndex({ "department": 1, "salary": -1 })
Create a Text Index (useful for text search):
javascript
Copy code
db.employees.createIndex({ "name": "text" })
Create a Geospatial Index (for location-based queries):
javascript
Copy code
db.employees.createIndex({ "location": "2dsphere" })
Using Node.js and Mongoose
Here's how you can add indexes using Mongoose, an ODM (Object Data Modeling) library for MongoDB and Node.js.

Install Mongoose:
sh
Copy code
npm install mongoose
Create a Mongoose Schema with Indexes:
javascript
Copy code
const mongoose = require('mongoose');
const Schema = mongoose.Schema;

// Connect to MongoDB
mongoose.connect('mongodb://localhost/company', { useNewUrlParser: true, useUnifiedTopology: true });

// Define a schema
const employeeSchema = new Schema({
    employee_id: { type: Number, index: true }, // Single field index
    name: { type: String, text: true }, // Text index
    department: String,
    salary: Number,
    location: {
        type: { type: String },
        coordinates: [Number]
    }
});

// Create a compound index
employeeSchema.index({ department: 1, salary: -1 });

// Create a geospatial index
employeeSchema.index({ location: '2dsphere' });

// Create a model
const Employee = mongoose.model('Employee', employeeSchema);

// Example of creating a new employee document
const newEmployee = new Employee({
    employee_id: 101,
    name: 'Alice Johnson',
    department: 'Development',
    salary: 85000,
    location: { type: "Point", coordinates: [-73.97, 40.77] }
});

newEmployee.save()
    .then(() => console.log('Employee saved'))
    .catch(err => console.log(err))
    .finally(() => mongoose.connection.close());
Explanation
Single Field Index: { employee_id: 1 } creates an index on the employee_id field.
Compound Index: { department: 1, salary: -1 } creates a compound index on department (ascending order) and salary (descending order).
Text Index: { name: "text" } creates a text index on the name field, useful for text searches.
Geospatial Index: { location: "2dsphere" } creates a geospatial index on the location field for queries involving geographic data.
These examples show how to create various types of indexes in MongoDB, both using the MongoDB Shell and programmatically using Node.js with Mongoose.