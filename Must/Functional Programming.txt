1. Conciseness and Readability

// Without functional programming
List<String> names = Arrays.asList("Alice", "Bob", "Charlie");
for (String name : names) {
    System.out.println(name);
}

// With functional programming
names.forEach(System.out::println);
2. Better Support for Parallel and Concurrent Programming

3. Enhanced APIs and Libraries
Functional programming enables the creation of more flexible and reusable APIs.

For example, the Stream API provides powerful operations like map, filter, and reduce for processing collections declaratively.

List<String> names = Arrays.asList("Alice", "Bob", "Charlie");
List<String> filteredNames = names.stream()
                                  .filter(name -> name.startsWith("A"))
                                  .collect(Collectors.toList());
								  
4.Demand for Declarative Programming

// Imperative style
int sum = 0;
for (int num : numbers) {
    if (num % 2 == 0) {
        sum += num;
    }
}

// Declarative style
int sum = numbers.stream()
                 .filter(num -> num % 2 == 0)
                 .reduce(0, Integer::sum);
				 
				 1. Simplifying Code with Immutability
5. Functional programming encourages the use of immutable objects, 
where data cannot be changed after itâ€™s created. This simplifies reasoning about code, 
reduces errors caused by side effects, and makes the code more predictable.
 Immutable objects fit well with Java's concurrent programming model, helping avoid issues like race conditions.
				 
6. Better Handling of Collections and Data Transformations
With the introduction of the Stream API in Java 8, transforming and processing data has become much more natural and efficient. 
You can easily filter, sort, or aggregate data using functional programming principles, without having to write complex loops and conditions manually.

7. Enhancing the Use of Higher-Order Functions	filter,map,reduce,predicate,foreach,flatMap

In functional programming, higher-order functions are functions that can take other functions as arguments or return functions as results. 

8.Performance Optimizations
FP in Java can lead to performance improvements, especially when using operations like lazy evaluation or parallel streams. 
The Stream API and other functional constructs can be optimized by the JVM in ways that traditional OOP constructs might not be.
9.Adaptation to Modern Programming Paradigms like Scala and Python	

10. Cleaner and More Expressive Code
FP in Java (with constructs like lambda expressions and the Stream API) leads to more concise, readable, and expressive code. 
Instead of writing long boilerplate code to iterate through collections, you can use functional operations like map(), filter(), 
and reduce() to perform complex transformations in a clean and declarative way.		

Intermediate Operations
Intermediate operations are operations that transform or filter a stream.
 They are lazy, meaning they do not execute until a terminal operation is invoked. Intermediate operations return a new stream, allowing for method chaining. 
 filter,map,flatmap,sorted,distinct,peek
 
 
 Terminal operations produce a result or side effect and trigger the execution of the stream pipeline. After a terminal operation is invoked, the stream cannot be reused.
 forEach(Consumer<T>),collect(Collector<T, A, R>),reduce(BinaryOperator<T>),count(),anyMatch(Predicate<T>) / allMatch(Predicate<T>) / noneMatch(Predicate<T>),
 findFirst() / findAny(),min(Comparator<T>) / max(Comparator<T>)