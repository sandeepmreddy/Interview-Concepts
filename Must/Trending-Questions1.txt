import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.streams.KafkaStreams;
import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.StreamsConfig;
import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.Predicate;

import java.util.Properties;
//Implemented Kafka Project from Scratch
public class KafkaStreamsBranchExample {

    public static void main(String[] args) {
        // Define properties for the Kafka Streams application
        Properties props = new Properties();
        props.put(StreamsConfig.APPLICATION_ID_CONFIG, "streams-branch-example");
        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());
        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());

        // Build the topology
        StreamsBuilder builder = new StreamsBuilder();
        KStream<String, String> sourceStream = builder.stream("input-topic");

        // Define predicates
        Predicate<String, String> isClick = (key, value) -> value.contains("click");
        Predicate<String, String> isNotClick = (key, value) -> !value.contains("click");

        // Branch the stream based on the predicates
        KStream<String, String>[] branches = sourceStream.branch(isClick, isNotClick);

        // Route each branch to a different topic
        branches[0].to("click-topic");
        branches[1].to("other-topic");

        // Build the topology and start the Kafka Streams application
        KafkaStreams streams = new KafkaStreams(builder.build(), props);
        streams.start();

        // Add shutdown hook to respond to SIGTERM and gracefully close Kafka Streams
        Runtime.getRuntime().addShutdownHook(new Thread(streams::close));
    }
}




JS closure It preserve the value inside the function.

var addTo = function(passed){
    
    var add = function(inner){
       return passed + inner;  
    };
    
    return add;   
};


var addThree = new addTo(3);
var addFour = new addTo(4);

//console.dir(addThree);
//console.dir(addFour);

console.log(addThree(1));
console.log(addFour(1));


The JavaScript prototype property allows you to add new properties to object constructors:

Example
function Person(first, last, age, eyecolor) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eyecolor;
}

Person.prototype.nationality = "English";
The JavaScript prototype property also allows you to add new methods to objects constructors:

function Person(first, last, age, eyecolor) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eyecolor;
}

Person.prototype.name = function() {
  return this.firstName + " " + this.lastName;
};

ResourceVersionNegotiator 

resourceVersionUtil.register(POST_ARCHIVE_V2, this.repoDetails , archiveWriteV2AndV1Negotiator);
        //Use ResourceVersionNegotiator for Archive Write Policy-based V3
        ResourceVersionNegotiator<PolicyBasedArchivingArgs, ArchiveWriteStatus> policyBasedArchivingNegotiator =
                new ResourceVersionNegotiator<>(
                        POST_ARCHIVE_POLICY_BASED_V3,
                        (args) -> triggerPolicyBasedArchiveWrite(args, PolicyBasedArchivingVersion.ARCHIVE_WRITE_POLICY_JSON_V3),
                        (args) -> triggerPolicyBasedArchiveWrite(args, PolicyBasedArchivingVersion.ARCHIVE_WRITE_POLICY_JSON_V2)
                );
				

1. Calculating the hashmap index 
Index = hashcode(Key) % (n-1)  ;