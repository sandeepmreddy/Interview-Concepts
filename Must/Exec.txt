 
Future provides a basic, unidirectional way to manage asynchronous computation but lacks non-blocking functionality and advanced control like combining results or handling errors. CompletableFuture, introduced in Java 8, extends Future
 
 Future<String> result;
 List<ReportTask> tasks = getReportTasks();
        ExecutorService processExecutor = Executors.newFixedThreadPool(NUM_COMPOSITION_THREADS);
        tasks.forEach(task -> {
            
            result = processExecutor.submit(task);
        });
		
		final Map<String, InputStream> entryMap = result.get();
		
		 processExecutor.shutdown();
		 
 List<ReportTask> getReportTasks()
 {
    List<ReportTask> tasks = new ArrayList<ReportTask>();
	tasks.add(new Task1());
	tasks.add(new Task2());
	return tasks; 
 }
		
class Task1 implements Callable<String> {
}

class Task2 implements Callable<String> {
}

Sr. No.	Key	Runnable	Callable
1
Package
It belongs to Java.lang
It belongs to java.util.concurrent
2
Thread Creation
We can create thread by passing runnable as a parameter.
We can’t create thread by passing callable as parameter  
3
Return Type
Ruunable does not return anything
Callable can return results
4.
Method
It has run() method
It has call()method
5
Bulk Execution
It can’t be used for bulk execution of task
It can be used for bulk execution of task by invoking invokeAll().

18.Executor framework
Class1 :

		Task task = new tset1.Task("GeeksForGeeks");

        // Creating object of ExecutorService class and
        // Future object Class
        ExecutorService executorService
                = Executors.newFixedThreadPool(4);
        Future<String> result
                = executorService.submit(task);

        // Try block to check for exceptions
        try {
            System.out.println(result.get());
        }
		
Class2 : Task
	
	// Method of this Class
public String call() throws Exception
{
	return "Hiiii " + message + "!";
}

ExecutorService executor =
        new ThreadPoolExecutor(0, maxPoolSize, keepAliveTime, timeUnit,
                               new LinkedBlockingDeque<>());
							   
CompletableFuture<String> futureOutput =
        CompletableFuture.supplyAsync(() -> "test", executor);
		
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.concurrent.CompletableFuture;

public class AsyncHttpGet {
    private static final HttpClient httpClient = HttpClient.newHttpClient();

    // Method to perform an asynchronous GET request
    public static CompletableFuture<String> fetchUrl(String url) {
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(url))
                .GET()
                .build();

        return httpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString())
                .thenApply(HttpResponse::body); // Extract the body as a String
    }

    public static void main(String[] args) {
        String url1 = "https://example.com/api/data1";
        String url2 = "https://example.com/api/data2";

        // Fetch multiple URLs asynchronously
        CompletableFuture<String> future1 = fetchUrl(url1);
        CompletableFuture<String> future2 = fetchUrl(url2);

        // Use CompletableFuture.allOf to wait for all futures to complete
        CompletableFuture<Void> allFutures = CompletableFuture.allOf(future1, future2);

        // Handle the results after all futures are complete
        allFutures.thenRun(() -> {
            try {
                String result1 = future1.get(); // Get the result of the first future
                String result2 = future2.get(); // Get the result of the second future

                System.out.println("Response from URL1: " + result1);
                System.out.println("Response from URL2: " + result2);
            } catch (Exception e) {
                e.printStackTrace();
            }
        });

        // Keep the program running until all futures are processed
        allFutures.join();
    }
}

Different Executor Frame works.


1. **`Executors.newFixedThreadPool(int nThreads)`**
   Creates a thread pool with a fixed number of threads that reuse existing threads for executing tasks.

2. **`Executors.newSingleThreadExecutor()`**
   Creates an executor that uses a single worker thread to execute tasks sequentially.

3. **`Executors.newCachedThreadPool()`**
   Creates a thread pool that creates new threads as needed and reuses previously constructed threads when available.

4. **`Executors.newScheduledThreadPool(int corePoolSize)`**
   Creates a thread pool that can schedule tasks to run after a delay or periodically.

5. **`Executors.newWorkStealingPool()`**
   Creates a thread pool using the work-stealing algorithm, ideal for parallel processing of many small tasks.



