Java loom project-Virtual Threads
Java 171. Sealed Classes
Java 17
public sealed class Vehicle permits Car, Truck {}

final class Car extends Vehicle {}
final class Truck extends Vehicle {}
2. Pattern Matching for `instanceof`
Simplifies `instanceof` checks with pattern variables.
if (obj instanceof String s) {
    System.out.println(s.toLowerCase());
}
3. Switch Expressions
* More concise and safer switch statements (with yield).

String result = switch (day) {
    case MONDAY, FRIDAY -> "Workday";
    case SATURDAY, SUNDAY -> "Weekend";
    default -> throw new IllegalArgumentException();
};
4. Text Blocks 
Multiline strings without boilerplate.

String json = """
    {
      "name": "ChatGPT",
      "type": "AI"
    }
    """;


Here's a concise overview of key features introduced in **Java 18 to Java 22**, tailored for a software professional:

---

Java 18 

1. **UTF-8 by Default**

   * `Charset.defaultCharset()` now returns UTF-8 across platforms.
   * Improves consistency in file and stream encoding.

2. Code Snippets in JavaDoc

   * `@snippet` tag for embedding working code in documentation.

 Java 19 (September 2022)

1. **Virtual Threads (Preview)**

   * Lightweight threads backed by `java.lang.Thread`.
   * Huge boost for concurrent applications (especially server apps).
   * Example:

     ```java
     Thread.startVirtualThread(() -> doSomething());
     ```

2. Record Patterns (Preview)**

   * Pattern matching for records.
   * Example:

     ```java
     if (obj instanceof Point(int x, int y)) { ... }
     ```

Java 21 

1. **Virtual Threads (Finalized)**

   * Now stable for production use.
   * Ideal for scaling I/O-bound applications.

2. **Pattern Matching for `switch` (Finalized)**

   * Cleaner, type-safe switches.
   * Example:

     switch (obj) {
         case String s -> ...
         case Integer i -> ...
     }


3. **Record Patterns (2nd Preview)**

   * Enhanced matching and nesting in records.

4. **Sequenced Collections (New API)**

   * Interfaces like `SequencedCollection`, `SequencedSet`, `SequencedMap` for consistent ordering (first, last).

5. **String Templates (Preview)**

   * Like string interpolation.
   * Example:

     ```java
     STR."Hello \{name}!"
     ```

---

Java 22

1. **Stream Gatherers (Preview)**

   * Enhanced custom collection logic in streams.
   * Think of it as a more flexible `Collectors`.

2. **Class-File API (Preview)**

   * Low-level API to programmatically read/write `.class` files.

3. **Foreign Function & Memory API (3rd Preview)**

   * Safe and efficient access to native code and memory.

4. **Unnamed Variables and Patterns (Preview)**

   * Use `_` to ignore unused variables.
   * Example: `case SomeType(_, _) -> ...`

5. **Launch Multi-File Source-Code Programs**

   * Run multi-class source code directly via CLI:

     ```bash
     java Main.java Helper.java
     ```

---

Summary:

* **Java 21** (LTS) is stable and rich in features like **virtual threads**, **pattern matching**, and **structured concurrency** â€” ideal for backend, microservices, or reactive systems.
* **String Templates**, **Record Patterns**, and **Stream Gatherers** in Java 22 improve expressiveness and data handling.





