Q)What is Race condition in java?

Race condition in Java occurs in a multi-threaded environment when more than one thread try to access a shared resource (modify, write) at the same time. Since multiple threads try to race each other to finish executing a method thus the name race condition.

Q)How to avoid Race condition in java?
1. Syncrhronization
2. Locks
3. Atomic Variables
Race conditions can be avoided by proper thread synchronization in critical sections. Thread synchronization can be achieved using a synchronized block of Java code. Thread synchronization can also be achieved using other synchronization constructs like locks or atomic variables like java.

Q)What is atomic variables in java?

The most commonly used atomic variable classes in Java are AtomicInteger, AtomicLong, AtomicBoolean, and AtomicReference. set() – writes the value to memory, so that the change is visible to other threads; equivalent to writing a volatile variable.

Q)Voltaile Vs Atomic 

here are two important concepts in multithreading environment:

atomicity
visibility
The volatile keyword eradicates visibility problems, but it does not deal with atomicity. volatile will prevent the compiler from reordering instructions which involve a write and a subsequent read of a volatile variable; e.g. k++. Here, k++ is not a single machine instruction, but three:

copy the value to a register;
increment the value;
place it back.
So, even if you declare a variable as volatile, this will not make this operation atomic; this means another thread can see a intermediate result which is a stale or unwanted value for the other thread.



Volatile(main memory/Not local memory) keyword is used to modify the value of a variable by different threads. It is also used to make classes thread safe. It means that multiple threads can use a method and instance of the classes at the same time without any problem.Being stored in main memory

4. semaphore
A semaphore controls access to a shared resource through the use of a counter. If the counter is greater than zero, then access is allowed. If it is zero, then access is denied.

5. Differences Between Lock and Synchronized Block
LOCk API : https://www.baeldung.com/java-concurrent-locks
There are few differences between the use of synchronized block and using Lock API's:

A synchronized block is fully contained within a method – we can have Lock API's lock() and unlock() operation in separate methods
A synchronized block doesn't support the fairness, any thread can acquire the lock once released, no preference can be specified. We can achieve fairness within the Lock APIs by specifying the fairness property. It makes sure that longest waiting thread is given access to the lock
A thread gets blocked if it can't get an access to the synchronized block. The Lock API provides tryLock() method. The thread acquires lock only if it's available and not held by any other thread. This reduces blocking time of thread waiting for the lock
A thread which is in “waiting” state to acquire the access to synchronized block, can't be interrupted. The Lock API provides a method lockInterruptibly() which can be used to interrupt the thread when it's waiting for the lock

6. In singleton scope ,what is the state of local variable?

Spring will create only one instance object of the class A (let's call it objA) and within that object, the thread local variable will reside. Note that, Spring doesn't return the objA to any thread, but the threads executes the logic within or associated with objA.

However, the Threadlocal variable value is only visible to the thread which is executing the logic. In this case even there is only one object instance of class A (objA) each executing thread will have its own value for the thread local variable student according to ThreadLocal javadoc,




